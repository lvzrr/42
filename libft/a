==> ft_atoi.c <==
#include "libft.h"

int	ft_atoi(const char *str)
{
	int		out;
	int		neg;
	int		i;

	out = 0;
	i = 0;
	neg = 1;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-')
	{
		neg *= -1;
		i++;
	}
	else if (str[i] == '+')
		i++;
	while (str[i] && (str[i] >= '0' && str[i] <= '9'))
		out = out * 10 + (str[i++] - '0');
	return (out * neg);
}

==> ft_bzero.c <==
#include "libft.h"

void	ft_bzero(void *ptr, unsigned int n)
{
	unsigned char	*p;

	if (n == 0)
		return ;
	p = (unsigned char *) ptr;
	while (n > 0)
		p[--n] = 0;
}

==> ft_calloc.c <==
#include "libft.h"

void	*ft_calloc(unsigned int n, unsigned int size)
{
	unsigned long	total;
	unsigned int	i;
	void			*alloc;

	total = n * size;
	if (n != 0 && total / n != size)
		return (0);
	alloc = malloc(total);
	if (!alloc)
		return (NULL);
	i = 0;
	while (i < total)
		((unsigned char *)alloc)[i++] = 0;
	return ((void *) alloc);
}

==> ft_isalnum.c <==
#include "libft.h"

int	ft_isalnum(int c)
{
	return (((c >= 'a' && c <= 'z')
			|| (c >= 'A' && c <= 'Z')
			|| (c >= '0' && c <= '9')));
}

==> ft_isalpha.c <==
#include "libft.h"

int	ft_isalpha(int c)
{
	return ((c >= 'a' && c <= 'z')
		|| (c >= 'A' && c <= 'Z'));
}

==> ft_isascii.c <==
#include "libft.h"

int	ft_isascii(int c)
{
	return (c >= 0 && c <= 127);
}

==> ft_isdigit.c <==
#include "libft.h"

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

==> ft_isprint.c <==
#include "libft.h"

int	ft_isprint(int c)
{
	return (c >= 32 && c <= 126);
}

==> ft_itoa.c <==
#include "libft.h"

static unsigned int	count(int n)
{
	unsigned int	i;

	i = 0;
	if (n <= 0)
		i++;
	while (n != 0)
	{
		i++;
		n /= 10;
	}
	return (i);
}

static int	_abs(int x)
{
	if (x < 0)
		return (-x);
	return (x);
}

char	*ft_itoa(int n)
{
	char			*out;
	unsigned int	cc;

	cc = count(n);
	out = malloc(cc + 1);
	if (!out)
		return (NULL);
	if (n < 0)
		out[0] = '-';
	out[cc] = 0;
	while (cc > 0 || n != 0)
	{
		if (out[0] == '-' && cc == 1)
			break ;
		out[--cc] = '0' + _abs(n % 10);
		n /= 10;
	}
	return (out);
}

==> ft_lstadd_back.c <==
#include "libft.h"

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*tmp;

	if (!lst || !new)
		return ;
	if (!*lst)
	{
		*lst = new;
		return ;
	}
	tmp = *lst;
	while (tmp->next != NULL)
		tmp = tmp->next;
	tmp->next = new;
}

==> ft_lstadd_front.c <==
#include "libft.h"

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (!lst || !new)
		return ;
	new->next = *lst;
	*lst = new;
}

==> ft_lstclear.c <==
#include "libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*tmp;

	if (!lst || !*lst || !del)
		return ;
	while (*lst)
	{
		tmp = (*lst)->next;
		del((*lst)->content);
		free(*lst);
		*lst = tmp;
	}
}

==> ft_lstdelone.c <==
#include "libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	if (!del || !lst)
		return ;
	del(lst->content);
	free(lst);
}

==> ft_lstiter.c <==
#include "libft.h"

void	ft_lstiter(t_list	*lst, void (*f)(void *))
{
	if (!lst || !f)
		return ;
	while (lst)
	{
		f(lst->content);
		lst = lst->next;
	}
}

==> ft_lstlast.c <==
#include "libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (!lst)
		return (NULL);
	while (lst->next != NULL)
		lst = lst->next;
	return (lst);
}

==> ft_lstmap.c <==
#include "libft.h"

static void	*errorhandle(t_list *newl, void *tmp, void (*del)(void *))
{
	del(tmp);
	ft_lstclear(&newl, del);
	return (NULL);
}

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	int		len;
	int		i;
	void	*tmp;
	t_list	*newl;
	t_list	*newnode;

	if (!lst || !f || !del)
		return (NULL);
	len = ft_lstsize(lst);
	newl = NULL;
	i = 0;
	while (i < len && lst)
	{
		tmp = f(lst->content);
		newnode = ft_lstnew(tmp);
		if (!newnode)
			return (errorhandle(newl, tmp, del));
		ft_lstadd_back(&newl, newnode);
		lst = lst->next;
	}
	return (newl);
}

==> ft_lstnew.c <==
#include "libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*newl;

	newl = (t_list *)malloc(sizeof(t_list));
	if (!newl)
		return (NULL);
	newl->content = content;
	newl->next = NULL;
	return (newl);
}

==> ft_lstsize.c <==
#include "libft.h"

int	ft_lstsize(t_list *lst)
{
	int	l;

	l = 0;
	if (!lst)
		return (0);
	while (lst)
	{
		lst = lst->next;
		l++;
	}
	return (l);
}

==> ft_memchr.c <==
#include "libft.h"

void	*ft_memchr(const void *ptr, int c, unsigned int n)
{
	unsigned int	i;
	unsigned char	*p;

	p = (unsigned char *)ptr;
	i = 0;
	while (i < n)
	{
		if (p[i] == (unsigned char)c)
			return (p + i);
		i++;
	}
	return ((void *) 0);
}

==> ft_memcmp.c <==
#include "libft.h"

int	ft_memcmp(const void *r1, const void *r2, unsigned int n)
{
	unsigned char	*_r1;
	unsigned char	*_r2;

	_r1 = (unsigned char *)r1;
	_r2 = (unsigned char *)r2;
	if (n == 0)
		return (0);
	while (n > 0)
	{
		if (*_r1 != *_r2)
			return (*_r1 - *_r2);
		_r1++;
		_r2++;
		n--;
	}
	return (0);
}

==> ft_memcpy.c <==
#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, unsigned int n)
{
	void			*ret;
	unsigned char	*dst;
	unsigned char	*sr;

	if (!dest && !src)
		return (NULL);
	ret = dest;
	dst = (unsigned char *)dest;
	sr = (unsigned char *)src;
	while (n > 0)
	{
		*dst++ = *sr++;
		n--;
	}
	return (ret);
}

==> ft_memmove.c <==
#include "libft.h"

void	*ft_memmove(void *dest, const void *src, unsigned int n)
{
	unsigned char	*s;
	unsigned char	*d;
	unsigned int	i;

	if (src == dest)
		return (dest);
	s = (unsigned char *)src;
	d = (unsigned char *)dest;
	i = 0;
	if (s < d)
	{
		while (n-- > 0)
			d[n] = s[n];
	}
	else
	{
		while (i < n)
		{
			d[i] = s[i];
			i++;
		}
	}
	return (dest);
}

==> ft_memset.c <==
#include "libft.h"

void	*ft_memset(void *s, int c, unsigned int n)
{
	unsigned char	*p;

	p = (unsigned char *)s;
	while (n-- > 0)
		*p++ = (unsigned char)c;
	return ((void *) s);
}

==> ft_putchar_fd.c <==
#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}

==> ft_putendl_fd.c <==
#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	ft_putstr_fd(s, fd);
	write(fd, "\n", 1);
}

==> ft_putnbr_fd.c <==
#include "libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	char	o;

	if (n == -2147483648)
	{
		write(fd, "-2147483648", 11);
		return ;
	}
	if (n < 0)
	{
		n = -n;
		write(fd, "-", 1);
	}
	if (n >= 10)
	{
		ft_putnbr_fd(n / 10, fd);
		ft_putnbr_fd(n % 10, fd);
	}
	else
	{
		o = (n % 10) + '0';
		write(fd, &o, 1);
	}
}

==> ft_putstr_fd.c <==
#include "libft.h"

void	ft_putstr_fd(char *str, int fd)
{
	unsigned int	i;

	i = 0;
	if (!str)
		return ;
	while (str[i])
	{
		write(fd, str + i, 1);
		i++;
	}
}

==> ft_split.c <==
#include "libft.h"

static unsigned int	count_words(char *str, char set)
{
	unsigned int	iw;
	unsigned int	wc;

	iw = 0;
	wc = 0;
	while (*str)
	{
		if (!iw && *str != set)
		{
			iw = 1;
			wc++;
		}
		if (iw && *str == set)
			iw = 0;
		str++;
	}
	return (wc);
}

static char	*eat_literal(char *str, char set)
{
	int		i;
	char	*out;

	i = 0;
	while (str[i] && str[i] != set)
		i++;
	out = (char *)malloc(i + 1);
	if (!out)
		return (NULL);
	i = 0;
	while (str[i] && str[i] != set)
	{
		out[i] = str[i];
		i++;
	}
	out[i] = '\0';
	return (out);
}

static void	free_words(char **out)
{
	int	i;

	i = 0;
	while (out[i])
		free(out[i++]);
	free(out);
}

static int	fill_words(const char *str, char set, char **out)
{
	unsigned int	i;
	unsigned int	j;

	i = 0;
	j = 0;
	while (str[i])
	{
		if (str[i] != set)
		{
			out[j] = eat_literal((char *)str + i, set);
			if (!out[j])
				return (0);
			j++;
			while (str[i] && str[i] != set)
				i++;
			continue ;
		}
		i++;
	}
	return (1);
}

char	**ft_split(const char *str, char set)
{
	char			**out;
	unsigned int	wc;

	if (!str)
		return (NULL);
	wc = count_words((char *)str, set);
	out = (char **)malloc((wc + 1) * sizeof(char *));
	if (!out)
		return (NULL);
	out[wc] = NULL;
	if (!fill_words(str, set, out))
	{
		free_words(out);
		return (NULL);
	}
	return (out);
}

==> ft_strchr.c <==
#include "libft.h"

char	*ft_strchr(const char *haystack, int needle)
{
	unsigned int	i;

	i = 0;
	while (haystack[i] && haystack[i] != (char)needle)
		i++;
	if (haystack[i] == 0 && (char)needle != 0)
		return ((void *) 0);
	return ((char *)(haystack + i));
}

==> ft_strdup.c <==
#include "libft.h"

char	*ft_strdup(const char *str)
{
	unsigned int	i;
	unsigned int	n;
	char			*newstr;

	n = 0;
	while (str[n])
		n++;
	i = 0;
	newstr = (char *)malloc(n + 1);
	if (!newstr)
		return ((void *) 0);
	while (i < n)
	{
		newstr[i] = str[i];
		i++;
	}
	newstr[i] = 0;
	return (newstr);
}

==> ft_striteri.c <==
#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char *))
{
	unsigned int	i;

	i = 0;
	while (s[i])
	{
		f(i, &(s[i]));
		i++;
	}
}

==> ft_strjoin.c <==
#include "libft.h"

char	*ft_strjoin(const char *s1, const char *s2)
{
	unsigned int	l1;
	unsigned int	l2;
	unsigned int	i;
	unsigned int	j;
	char			*out;

	if (!s1 || !s2)
		return (NULL);
	l1 = ft_strlen(s1);
	l2 = ft_strlen(s2);
	out = malloc(l1 + l2 + 1);
	if (!out)
		return (NULL);
	i = 0;
	j = 0;
	while (j < l1)
		out[i++] = s1[j++];
	j = 0;
	while (j < l2)
		out[i++] = s2[j++];
	out[i] = 0;
	return (out);
}

==> ft_strlcat.c <==
#include "libft.h"

unsigned int	ft_strlcat(char *dest, const char *src, unsigned int n)
{
	unsigned int	srclen;
	unsigned int	dstlen;
	unsigned int	i;

	srclen = 0;
	while (src[srclen])
		srclen++;
	dstlen = 0;
	while (dest[dstlen] && dstlen < n)
		dstlen++;
	if (n <= dstlen)
		return (srclen + n);
	i = 0;
	while (dstlen + i < n - 1 && src[i])
	{
		dest[dstlen + i] = src[i];
		i++;
	}
	dest[dstlen + i] = 0;
	return (srclen + dstlen);
}

==> ft_strlcpy.c <==
#include "libft.h"

unsigned int	ft_strlcpy(char *dest, const char *src, unsigned int n)
{
	unsigned int	i;
	unsigned int	l;

	i = 0;
	l = 0;
	while (src[l])
		l++;
	if (n == 0)
		return (l);
	while (i < n - 1 && src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = 0;
	return (l);
}

==> ft_strlen.c <==
#include "libft.h"

unsigned int	ft_strlen(const char *str)
{
	unsigned int	l;

	l = 0;
	while (str[l])
		l++;
	return (l);
}

==> ft_strmapi.c <==
#include "libft.h"

char	*ft_strmapi(char const *str, char (*f)(unsigned int, char))
{
	unsigned int	i;
	char			*out;

	if (!str)
		return (NULL);
	out = malloc(ft_strlen(str) + 1);
	if (!out)
		return (NULL);
	i = 0;
	while (str[i])
	{
		out[i] = f(i, str[i]);
		i++;
	}
	out[i] = 0;
	return (out);
}

==> ft_strncmp.c <==
#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, unsigned int n)
{
	unsigned int	i;
	unsigned char	*w;
	unsigned char	*z;

	w = (unsigned char *)s1;
	z = (unsigned char *)s2;
	i = 0;
	while (i < n)
	{
		if (w[i] != z[i] || !w[i] || !z[i])
			return (w[i] - z[i]);
		i++;
	}
	return (0);
}

==> ft_strnstr.c <==
#include "libft.h"

char	*ft_strnstr(const char *haystack, const char *needle, unsigned int n)
{
	unsigned int	i;
	unsigned int	l;

	i = 0;
	l = 0;
	if (!*needle)
		return ((char *)haystack);
	if (!*haystack)
		return (NULL);
	while (needle[l])
		l++;
	while (haystack[i] && (i + l) <= n)
	{
		if (!ft_strncmp(&(haystack[i]), needle, l))
			return ((char *)(&(haystack[i])));
		i++;
	}
	return ((void *) 0);
}

==> ft_strrchr.c <==
#include "libft.h"

char	*ft_strrchr(const char *haystack, int needle)
{
	int	l;

	l = ft_strlen(haystack);
	while (l >= 0 && haystack[l] != (char)needle)
		l--;
	if (haystack[l] != (char)needle)
		return (NULL);
	return ((char *)(haystack + l));
}

==> ft_strtrim.c <==
#include "libft.h"

static int	in_set(char c, const char *set)
{
	int	i;

	i = 0;
	while (set[i])
	{
		if (set[i] == c)
			return (i);
		i++;
	}
	return (-1);
}

char	*ft_strtrim(const char *str, const char *set)
{
	unsigned int	b;
	unsigned int	e;
	unsigned int	i;
	char			*out;

	if (!str)
		return (NULL);
	if (!set || !set[0] || !str[0])
		return (ft_strdup(str));
	i = 0;
	b = 0;
	e = ft_strlen(str) - 1;
	while (in_set(str[b], set) >= 0)
		b++;
	while (e > b && in_set(str[e], set) >= 0)
		e--;
	out = malloc((e - b) + 2);
	if (!out)
		return (NULL);
	while (b <= e)
		out[i++] = str[b++];
	out[i] = 0;
	return (out);
}

==> ft_substr.c <==
#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	unsigned int	j;
	char			*out;

	if (!s)
		return (NULL);
	if (len == 0 || start >= ft_strlen(s))
		return (ft_strdup(""));
	if (len > ft_strlen(s) - start)
		len = ft_strlen(s) - start;
	out = malloc(len + 1);
	if (!out)
		return (NULL);
	j = 0;
	while (j < len && s[start])
		out[j++] = s[start++];
	out[j] = 0;
	return (out);
}

==> ft_tolower.c <==
#include "libft.h"

int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (c - ('A' - 'a'));
	return (c);
}

==> ft_toupper.c <==
#include "libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - ('a' - 'A'));
	return (c);
}
